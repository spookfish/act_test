# name: env-vars-example
# on:
#   push:
# jobs:
#   say-hello:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       -
#        name: Who to Greet
#        uses: actions/hello-world-javascript-action@v1.1
#        with: 
#           who-to-greet: 'Mona the Octocat'
#       -
#         name: Say Hello
#         run: echo "MOO world! $FOO"
#       -
#         name: Do stuff
#         run: |
#           echo "Step 1..."
#           echo "Step 2..."
#           echo "Step 3..."
#       -
#         name: Git test
#         run: git --version
#       -
#         name: Say Goodbye
#         run: echo "Goodbye!"

# name: parallel-jobs
# on:
#   push:
# jobs:
#   job-a:
#     runs-on: ubuntu-latest
#     needs: [job-c]
#     steps:
#       - run: echo "Doing work"
#   job-b:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "More work at the same time"
#   job-c:
#     runs-on: ubuntu-latest
#     steps:
#       - run: |
#           sleep 5
#           echo "Done!"

# name: outputs
# on: 
#   push:
# jobs:
#   job1:
#     runs-on: ubuntu-latest
#     steps:
#       -
#         name: Do Work
#         run: |
#           echo '::set-output name=FAV_NUMBER::3'
#           echo '::set-output name=FAV_COLOR::blue'
#         id: abc
#       -
#         name: Read output
#         run: |
#           echo "${{ steps.abc.outputs.FAV_NUMBER }}"
#           echo "${{ steps.abc.outputs.FAV_COLOR }}"
#     outputs:
#       fav-animal: tiger
#       fav-number: ${{ steps.abc.outputs.FAV_NUMBER }}
#       fav-food: fish and chips
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - run: |
#           echo "${{ needs.job1.outputs.fav-animal }}"
#           echo "${{ needs.job1.outputs.fav-number }}"
#           echo "${{ needs.job1.outputs.fav-food }}"

# Contexts are collections of variables that are accessible outside of the run
# commands. You can think of them as variables which can be templated into the
# workflow file itself. 
# name: contexts-example
# on:
#   pull:
# jobs:
#   use-context:
#     strategy:
#       matrix:
#         greeting: [Hello, Howdy]
#     runs-on: ubuntu-latest
#     steps:
#       -
#         name: Print Greeting
#         run: echo $GREETING
#         env:
#           GREETING: ${{ matrix.greeting }}
#       -
#         name: Do work with a secret
#         run: |
#           echo $GITHUB_WORKSPACE
#           echo ${{ github.event_name }}
#         env:
#           A_SECRET: ${{ secrets.A_SECRET }}
#       -
#         name: Run only for pulls
#         if: ${{ github.event_name == 'pull' }}
#         run: |
#           echo "Triggered by a pull request"
#           echo ${{ github.base_ref }}

# name: go-example
# on:
#   push:
# jobs:
#   fuck:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       -
#         name: Moo
#         run: |
#           echo "moo!"
#       -
#         name: Set up Go 1.17
#         uses: actions/setup-go@v2
#         id: go
#         with:
#           go-version: 1.17
#       -
#         name: Print Go Version
#         run: |
#           go version
#       -
#         name: Install catfact
#         run: |
#           go install github.com/spookfish/catfact@v1.0.0
#       - 
#         name: Cat Fact
#         run: |
#           go env
#           echo $PATH
#           catfact

name: Semgrep
on:
  push
jobs:
    semgrep:
      name: scan
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: returntocorp/semgrep-action@v1
          with:
            config: >- # more at semgrep.dev/explore
              p/security-audit
              p/secrets


# name: expressions-example
# on:
#   push:
#   pull:
# jobs:
#   use-expressions:
#     strategy:
#       matrix:
#         greeting: [Hello, Howdy, Hey]
#     runs-on: ubuntu-latest
#     steps:
#       -
#         name: Print if 'Hello'
#         if: ${{ matrix.greeting == 'Hello' }}
#         run: echo "greeting is Hello"
#       -
#         name: Print if starts with 'He'
#         if: ${{ startsWith(matrix.greeting, 'He') }}
#         run: echo "greeting starts with He"
#       -
#         name: Print if ends with 'y'
#         if: ${{ endsWith(matrix.greeting, 'y') }}
#         run: echo "greeting ends with y"          
#       -
#         name: Print if contains 'ow'
#         if: ${{ contains(matrix.greeting, 'ow') }}
#         run: echo "greeting contains ow"
#       -
#         name: Print formatted greeting
#         run: |
#           echo "${{ format('{0} says {1}', github.actor, matrix.greeting) }}"
#       -
#         name: To JSON
#         run: echo 'Job context is ${{ toJSON(job) }}'
#       -
#         name: From JSON 
#         env: ${{ fromJSON( '{"FOO":["apple", "pear"]}' ) }}
#         run: echo "-> ${FOO}"
#       -
#         name: Hash Files
#         run: echo "${{ hashFiles('boo.c') }}"
#       -
#         name: Success
#         if: ${{ success() }}
#         run: echo "Still running..."
#       -
#         name: Always
#         if: ${{ always() }}
#         run: echo "You will always see this"
#       -
#         name: Canceled
#         if: ${{ cancelled() }}
#         run: echo "You canceled the workflow"
#       -
#         name: Failure
#         if: ${{ failure() }}
#         run: echo "Something went wrong..."
